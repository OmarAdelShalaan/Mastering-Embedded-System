
Atmega_USART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000959  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b9  00000000  00000000  00000d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000441  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000387  00000000  00000000  00001cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 02 01 	call	0x204	; 0x204 <main>
  7a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:
#include "ATmega_USART_Driver.h"
#include "REG_Macros.h"
#include <stdint.h>

void USART_Init( USART_Config_t * USARTCfg )
{
  82:	fc 01       	movw	r30, r24
	// Enable receiver and transmitter 
	switch(USARTCfg->RX_TX_Enable)
  84:	80 81       	ld	r24, Z
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	51 f0       	breq	.+20     	; 0x9e <USART_Init+0x1c>
  8a:	18 f0       	brcs	.+6      	; 0x92 <USART_Init+0x10>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	21 f0       	breq	.+8      	; 0x98 <USART_Init+0x16>
  90:	08 c0       	rjmp	.+16     	; 0xa2 <USART_Init+0x20>
	{
		case RX_and_TX_Enable:
			UCSRB = (1<<RXEN)|(1<<TXEN);
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10
			break;
  96:	05 c0       	rjmp	.+10     	; 0xa2 <USART_Init+0x20>
		case TX_only_Enable:
			UCSRB = (1<<TXEN);
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	8a b9       	out	0x0a, r24	; 10
			break;
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <USART_Init+0x20>
		case RX_only_Enable:
			UCSRB = (1<<RXEN);
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	8a b9       	out	0x0a, r24	; 10
			break;
	}
	//• Bit 6 – UMSEL: USART Mode Select
	//This bit selects between Asynchronous and Synchronous mode of operation
	switch(USARTCfg->Asynch_Synch_Mode)
  a2:	81 81       	ldd	r24, Z+1	; 0x01
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	31 f0       	breq	.+12     	; 0xb4 <USART_Init+0x32>
  a8:	40 f0       	brcs	.+16     	; 0xba <USART_Init+0x38>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	49 f0       	breq	.+18     	; 0xc0 <USART_Init+0x3e>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	51 f0       	breq	.+20     	; 0xc6 <USART_Init+0x44>
  b2:	0d c0       	rjmp	.+26     	; 0xce <USART_Init+0x4c>
	{
		case USART_Synch_Rising_Mode:
		UCSRC = (1<<UMSEL) | (1<<URSEL);
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	80 bd       	out	0x20, r24	; 32
		break;
  b8:	0a c0       	rjmp	.+20     	; 0xce <USART_Init+0x4c>
		case USART_Synch_Falling_Mode:
		UCSRC = (1<<UMSEL) | (1<<URSEL) | (1<<UCPOL);
  ba:	81 ec       	ldi	r24, 0xC1	; 193
  bc:	80 bd       	out	0x20, r24	; 32
		break;
  be:	07 c0       	rjmp	.+14     	; 0xce <USART_Init+0x4c>
		case USART_Asynch_Mode:
		UCSRC = (0<<UMSEL) | (1<<URSEL);
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	80 bd       	out	0x20, r24	; 32
		break;
  c4:	04 c0       	rjmp	.+8      	; 0xce <USART_Init+0x4c>
		case USART_Asynch_UX2_Mode:
		UCSRC = (0<<UMSEL) | (1<<URSEL);
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	80 bd       	out	0x20, r24	; 32
		UCSRA = (1<<U2X);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	8b b9       	out	0x0b, r24	; 11
	//----------------------------------------------------------
	// USART Frame

	// Set baud rate
	// UBRR =(fOSC/2or8or16BAUD) - 1
	UBRRH &= ~(1<<URSEL);
  ce:	80 b5       	in	r24, 0x20	; 32
  d0:	8f 77       	andi	r24, 0x7F	; 127
  d2:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(USARTCfg->Frame.baud>>8);
  d4:	86 81       	ldd	r24, Z+6	; 0x06
  d6:	80 bd       	out	0x20, r24	; 32
	UBRRL = (unsigned char)USARTCfg->Frame.baud;
  d8:	85 81       	ldd	r24, Z+5	; 0x05
  da:	89 b9       	out	0x09, r24	; 9
	// Num of Data Bits
	UCSRC |= (1<<URSEL) |(USARTCfg->Frame.numDataBits<<UCSZ0);
  dc:	80 b5       	in	r24, 0x20	; 32
  de:	92 81       	ldd	r25, Z+2	; 0x02
  e0:	29 2f       	mov	r18, r25
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	28 2b       	or	r18, r24
  ea:	20 68       	ori	r18, 0x80	; 128
  ec:	20 bd       	out	0x20, r18	; 32
	//  Parity Mode
	UCSRC |= (1<<URSEL) |(USARTCfg->Frame.Parity<<UPM0);
  ee:	20 b5       	in	r18, 0x20	; 32
  f0:	93 81       	ldd	r25, Z+3	; 0x03
  f2:	30 e1       	ldi	r19, 0x10	; 16
  f4:	93 9f       	mul	r25, r19
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	82 2b       	or	r24, r18
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	80 bd       	out	0x20, r24	; 32
	// Num of Stop Bit
	switch(USARTCfg->Frame.numStopBits)
 100:	84 81       	ldd	r24, Z+4	; 0x04
 102:	88 23       	and	r24, r24
 104:	31 f0       	breq	.+12     	; 0x112 <USART_Init+0x90>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	51 f4       	brne	.+20     	; 0x11e <USART_Init+0x9c>
	{
		case twoStopBit:
			UCSRC |= (1<<URSEL) |(1 <<USBS);
 10a:	80 b5       	in	r24, 0x20	; 32
 10c:	88 68       	ori	r24, 0x88	; 136
 10e:	80 bd       	out	0x20, r24	; 32
			break;
 110:	08 95       	ret
		case oneStopBit:
			UCSRC |= (1<<URSEL);
 112:	80 b5       	in	r24, 0x20	; 32
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 bd       	out	0x20, r24	; 32
			UCSRC &= ~(1<<USBS);
 118:	80 b5       	in	r24, 0x20	; 32
 11a:	87 7f       	andi	r24, 0xF7	; 247
 11c:	80 bd       	out	0x20, r24	; 32
 11e:	08 95       	ret

00000120 <USART_Transmit>:
	
	
void USART_Transmit( USART_Config_t * USARTCfg, uint16_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 120:	5d 9b       	sbis	0x0b, 5	; 11
 122:	fe cf       	rjmp	.-4      	; 0x120 <USART_Transmit>
	;
	if(USARTCfg->Frame.numDataBits == SizeDataBits_9)
 124:	fc 01       	movw	r30, r24
 126:	82 81       	ldd	r24, Z+2	; 0x02
 128:	87 30       	cpi	r24, 0x07	; 7
 12a:	49 f4       	brne	.+18     	; 0x13e <USART_Transmit+0x1e>
	{
		if(((data >> 8) & 0x01) == 1)
 12c:	70 ff       	sbrs	r23, 0
 12e:	04 c0       	rjmp	.+8      	; 0x138 <USART_Transmit+0x18>
		{
			UCSRB |= (1 << TXB8);
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	81 60       	ori	r24, 0x01	; 1
 134:	8a b9       	out	0x0a, r24	; 10
 136:	03 c0       	rjmp	.+6      	; 0x13e <USART_Transmit+0x1e>
		}
		else
		{
			UCSRB &= ~(1 << TXB8);
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	8a b9       	out	0x0a, r24	; 10
		}
	}
	/* Put data into buffer, sends the data */
	UDR = (uint8_t)data;
 13e:	6c b9       	out	0x0c, r22	; 12
 140:	08 95       	ret

00000142 <USART_Transmit_String>:
}
void USART_Transmit_String( USART_Config_t * USARTCfg, uint8_t * str )
{
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	00 d0       	rcall	.+0      	; 0x150 <USART_Transmit_String+0xe>
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	7b 01       	movw	r14, r22
	int i = 0;
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != '\0')
 15e:	07 c0       	rjmp	.+14     	; 0x16e <USART_Transmit_String+0x2c>
	{
		USART_Transmit(&USARTCfg, str[i]);
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 90 00 	call	0x120	; 0x120 <USART_Transmit>
		i++;
 16a:	0f 5f       	subi	r16, 0xFF	; 255
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
	UDR = (uint8_t)data;
}
void USART_Transmit_String( USART_Config_t * USARTCfg, uint8_t * str )
{
	int i = 0;
	while(str[i] != '\0')
 16e:	f7 01       	movw	r30, r14
 170:	e0 0f       	add	r30, r16
 172:	f1 1f       	adc	r31, r17
 174:	60 81       	ld	r22, Z
 176:	61 11       	cpse	r22, r1
 178:	f3 cf       	rjmp	.-26     	; 0x160 <USART_Transmit_String+0x1e>
	{
		USART_Transmit(&USARTCfg, str[i]);
		i++;
	}
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

0000018c <USART_Receive>:
uint16_t USART_Receive( USART_Config_t * USARTCfg )
{
	/* Wait for data to be received */
	uint8_t temp = 0;
	while ( !(UCSRA & (1<<RXC)) )
 18c:	5f 9b       	sbis	0x0b, 7	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <USART_Receive>
	;
	if(USARTCfg->Frame.numDataBits == SizeDataBits_9)
 190:	fc 01       	movw	r30, r24
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	87 30       	cpi	r24, 0x07	; 7
 196:	21 f4       	brne	.+8      	; 0x1a0 <USART_Receive+0x14>
	{
		temp = ((UCSRB >> RXB8) & 0x01) == 1?  1: 0;
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	86 95       	lsr	r24
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <USART_Receive+0x16>
	}
}
uint16_t USART_Receive( USART_Config_t * USARTCfg )
{
	/* Wait for data to be received */
	uint8_t temp = 0;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
	if(USARTCfg->Frame.numDataBits == SizeDataBits_9)
	{
		temp = ((UCSRB >> RXB8) & 0x01) == 1?  1: 0;
	}
	/* Get and return received data from buffer */
	return ((temp << 8)| UDR);
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	98 2f       	mov	r25, r24
 1a6:	88 27       	eor	r24, r24
 1a8:	2c b1       	in	r18, 0x0c	; 12
}
 1aa:	82 2b       	or	r24, r18
 1ac:	08 95       	ret

000001ae <USART_Receive_String>:
void USART_Receive_String( USART_Config_t * USARTCfg, uint8_t * str )
{
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <USART_Receive_String+0x12>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	6b 01       	movw	r12, r22
	int i = 0;
 1ca:	00 e0       	ldi	r16, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		str[i] = (uint8_t)USART_Receive(&USARTCfg);
 1ce:	76 01       	movw	r14, r12
 1d0:	e0 0e       	add	r14, r16
 1d2:	f1 1e       	adc	r15, r17
 1d4:	ce 01       	movw	r24, r28
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	0e 94 c6 00 	call	0x18c	; 0x18c <USART_Receive>
 1dc:	f7 01       	movw	r30, r14
 1de:	80 83       	st	Z, r24
		if(str[i] == '\r')break;
 1e0:	8d 30       	cpi	r24, 0x0D	; 13
 1e2:	19 f0       	breq	.+6      	; 0x1ea <USART_Receive_String+0x3c>
		i++;
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
	}
 1e8:	f2 cf       	rjmp	.-28     	; 0x1ce <USART_Receive_String+0x20>
	str[i] = '\0';
 1ea:	f7 01       	movw	r30, r14
 1ec:	10 82       	st	Z, r1
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

00000204 <main>:

//#include <avr/io.h>
#include "ATmega_USART_Driver.h"

int main(void)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	6b 97       	sbiw	r28, 0x1b	; 27
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
	volatile uint16_t data;
	uint8_t str[20];
	USART_Config_t  USARTCfg;
	USARTCfg.RX_TX_Enable = RX_and_TX_Enable;
 218:	1d 8a       	std	Y+21, r1	; 0x15
	USARTCfg.Asynch_Synch_Mode = USART_Asynch_Mode;	
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	8e 8b       	std	Y+22, r24	; 0x16
	USARTCfg.Frame.numDataBits = SizeDataBits_9;	
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	8f 8b       	std	Y+23, r24	; 0x17
	USARTCfg.Frame.baud = 51;	
 222:	83 e3       	ldi	r24, 0x33	; 51
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9b 8f       	std	Y+27, r25	; 0x1b
 228:	8a 8f       	std	Y+26, r24	; 0x1a
	USARTCfg.Frame.numStopBits = oneStopBit;
 22a:	19 8e       	std	Y+25, r1	; 0x19
	USARTCfg.Frame.Parity = Parity_Disable;
 22c:	18 8e       	std	Y+24, r1	; 0x18

	USART_Init(&USARTCfg);	
 22e:	ce 01       	movw	r24, r28
 230:	45 96       	adiw	r24, 0x15	; 21
 232:	0e 94 41 00 	call	0x82	; 0x82 <USART_Init>
	USART_Transmit_String(&USARTCfg,"Omar Adel Shalaan\r");
 236:	60 e6       	ldi	r22, 0x60	; 96
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	ce 01       	movw	r24, r28
 23c:	45 96       	adiw	r24, 0x15	; 21
 23e:	0e 94 a1 00 	call	0x142	; 0x142 <USART_Transmit_String>
	USART_Receive_String(&USARTCfg,str);
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	ce 01       	movw	r24, r28
 24a:	45 96       	adiw	r24, 0x15	; 21
 24c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_Receive_String>
	USART_Transmit_String(&USARTCfg,str);
 250:	be 01       	movw	r22, r28
 252:	6f 5f       	subi	r22, 0xFF	; 255
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	ce 01       	movw	r24, r28
 258:	45 96       	adiw	r24, 0x15	; 21
 25a:	0e 94 a1 00 	call	0x142	; 0x142 <USART_Transmit_String>
 25e:	ff cf       	rjmp	.-2      	; 0x25e <main+0x5a>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
